#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;


typedef struct _node {
	int data;
	_node* a[26];
}node;

node* makenode(void) {
	node* newnode = (node*)malloc(sizeof(node));
	for (int i = 0; i < 26; i++) {
		newnode->a[i] = NULL;
	}
	newnode->data = 0;
	return newnode;
}

void deletenode(node* root) {
	for (int i = 0; i < 26; i++) {
		if (root->a[i] != NULL) {
			deletenode(root->a[i]);
		}
	}
	free(root);
}

int main() {
	int n, m, temp_n, fail;
	vector<string> stack;
	string temp;
	cin >> n >> m;
	node* root = makenode();
	node* temp_node;
	for (int i = 0; i < n; i++) {
		cin >> temp;
		temp_node = root;
		temp_n = 0;
		while (temp[temp_n] != 0) {
			if (temp_node->a[temp[temp_n] - 'a'] == NULL) {
				temp_node->a[temp[temp_n] - 'a'] = makenode();
			}
			temp_node = temp_node->a[temp[temp_n] - 'a'];
			temp_n++;
		}
		temp_node->data = 1;
	}
	for (int i = 0; i < m; i++) {
		cin >> temp;
		fail = 0;
		temp_node = root;
		temp_n = 0;
		while (temp[temp_n] != 0) {
			if (temp_node->a[temp[temp_n] - 'a'] == NULL) {
				fail = 1;
				break;
			}
			temp_node = temp_node->a[temp[temp_n] - 'a'];
			temp_n++;
		}

		if (fail == 0 && temp_node->data == 1) {
			stack.push_back(temp);
		}
	}
	sort(stack.begin(), stack.end());
	temp_n = stack.size();
	cout << temp_n << "\n";
	for (int i = 0; i < temp_n; i++) {
		cout << stack[i] << "\n";
	}
	return 0;
}
